package com.user.model;

import java.util.ArrayList;
import java.util.List;

import org.aspectj.util.IStructureModel;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * Represents a user entity in the database.
 * <p>
 * This class is annotated with {@code @Entity}, indicating that it is mapped to a database table.
 * The table name is specified as "user_table" via the {@code @Table} annotation.
 * <p>
 * The {@code @Builder} annotation generates a builder pattern for this class, allowing convenient object creation.
 * <p>
 * The {@code @Data} annotation, provided by Lombok, automatically generates getters, setters, {@code toString},
 * {@code equals}, and {@code hashCode} methods for the fields in this class.
 * <p>
 * The {@code @AllArgsConstructor} annotation generates a constructor with all arguments,
 * and the {@code @NoArgsConstructor} annotation generates a constructor with no arguments.
 */
@Entity
@Table(name = "user_table")
@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
public class User {
	   /**
     * The unique identifier of the user.
     * <p>
     * This field is annotated with {@code @Id} to indicate that it's the primary key of the table.
     * {@code @GeneratedValue} specifies that its value is automatically generated by the database upon insertion.
     */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int userId;
    /**
     * The name of the user.
     */
    private String userName;

    /**
     * The email address of the user.
     */
    private String userEmail;

    /**
     * Information or description about the user.
     */
    private String about;
    /**
     * A list of ratings associated with the user.
     * <p>
     * The {@code @Transient} annotation indicates that this field is not to be persisted in the database.
     * It is transient, meaning it's only relevant for runtime and not for database storage.
     * This is commonly used for fields that are derived from other data or are not necessary to store in the database.
     */
    @Transient
    private List<Rating> ratings = new ArrayList<>();
	
}





